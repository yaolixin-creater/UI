"""
Django settings for autoTestPlatform project.

Generated by 'django-admin startproject' using Django 1.10.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_LOG_DIR = os.path.join(BASE_DIR, "Logs")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "standard": {
            "format":
            "[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]"
            "[%(levelname)s] [%(message)s]"
        },
        "simple": {
            "format":
            "[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d] %(message)s"
        },
        "specification": {
            "format": "%(message)s"
        },
    },
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue"
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "default": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_LOG_DIR, "AUTO_TEST_PLAT.log"),
            "maxBytes": 1024 * 1024 * 50,
            "backupCount": 3,
            "formatter": "simple",
            "encoding": "utf-8",
        },
        "error": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(BASE_LOG_DIR, "AUTO_TEST_PLAT_err.log"),
            "maxBytes": 1024 * 1024 * 50,
            "backupCount": 5,
            "formatter": "standard",
            "encoding": "utf-8",
        },
        "specification": {
            "level":
            "INFO",
            "class":
            "logging.handlers.RotatingFileHandler",
            "filename":
            os.path.join(BASE_LOG_DIR, "AUTO_TEST_PLAT_specification.log"),
            "maxBytes":
            1024 * 1024 * 50,
            "backupCount":
            5,
            "formatter":
            "specification",
            "encoding":
            "utf-8",
        },
    },
    "loggers": {
        "autotest": {
            "handlers": ["default", "console", "error"],
            "level": "INFO",
            "propagate": True,
        },
        "user": {
            "handlers": ["default", "console", "error"],
            "level": "INFO",
            "propagate": True,
        },
        "specification": {
            "handlers": ["console", "specification"],
            "level": "INFO",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django.request.get_host()": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
        "django.request.path": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "#f2tq)l9c86p%4#5anhx+r3mx3@jl$9uz3s=p%=pavjj_^gy6l"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "*"
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "apps.user",
    "apps.ctc_backend_manage",


    # "django_crontab",
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
]
CORS_ORIGIN_WHITELIST = (
    "*"
)
CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = ("DELETE", "GET", "OPTIONS", "PATCH", "POST", "PUT",
                      "VIEW", "DEL")

CORS_ALLOW_HEADERS = (
    "XMLHttpRequest",
    "X_FILENAME",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "Pragma",
    "Bypass-Tunnel-Reminder"
)

ROOT_URLCONF = "autoTestPlatform.urls"

TEMPLATES = [{
    "BACKEND":
    "django.template.backends.django.DjangoTemplates",
    "DIRS": [
        os.path.join(BASE_DIR, 'apps', 'ctc_backend_manage', 'templates',
                     'html_report'),
    ],
    "APP_DIRS":
    True,
    "OPTIONS": {
        "context_processors": [
            "django.template.context_processors.debug",
            "django.template.context_processors.request",
            "django.contrib.auth.context_processors.auth",
            "django.contrib.messages.context_processors.messages",
        ]
    },
}]

WSGI_APPLICATION = "autoTestPlatform.wsgi.application"

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE":
        "django.db.backends.sqlite3",
        "NAME":
        os.path.join(BASE_DIR, "common", "db", "auto.db").replace("\\", "/"),
        'OPTIONS': {
            'timeout': 100,
        },
        "DATETIME_INPUT_FORMATS":
        '%Y-%m-%d %H:%M:%S',
        'threaded':
        True,
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME":
        "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.MinimumLengthValidator"
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.CommonPasswordValidator"
    },
    {
        "NAME":
        "django.contrib.auth.password_validation.NumericPasswordValidator"
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Shanghai"

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "autofronted/vueTemplates/static"),
    os.path.join(BASE_DIR, 'apps', 'ctc_backend_manage', 'templates',
                 'html_report'),
    os.path.join(BASE_DIR, 'apps', 'ctc_backend_manage', 'case', 'screenshot'),
]
